openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: https://api.live-study.com
    description: Generated server url
tags:
  - name: 인증 API
    description: 회원가입, 로그인 인증 관련 API
  - name: 신고 API
    description: 유저 신고 접수/처리 API
  - name: 스터디룸 API
    description: 스터디룸 입장/퇴장 API
  - name: 통계 페이지 API
    description: 통계 페이지 데이터 조회
  - name: 집중 타이머 API
    description: 집중 타이머 관련 API
  - name: LiveKit API
    description: LiveKit 입장 토큰 발급 API
  - name: 마이페이지 API
    description: 마이페이지 데이터 조회/수정 API
  - name: 칭호 & 뱃지
    description: 칭호 & 뱃지 관련 API
  - name: WebHook API
    description: |-
      LiveKit 서버에서 전송하는 WebHook 이벤트를 처리합니다.
      - 이 API는 외부 사용자 대상이 아니며, LiveKit 서버에 의해 자동으로 호출되는 방식입니다.
      각 이벤트에 따라 트랙 정보를 저장하거나 제거합니다.
paths:
  /webhook/livekit:
    post:
      tags:
        - WebHook API
      summary: LiveKit WebHook 이벤트 수신
      description: |-
        LiveKit 서버가 `track_published`, `track_unpublished` 이벤트 발생 시 호출하는 Webhook API입니다.
        - `track_published`: 사용자의 트랙 정보 저장
        - `track_unpublished`: 트랙 정보 제거
        **주의: 이 API는 인증 없이 호출됩니다. 외부에서 직접 호출하지 마세요.**
      operationId: handleWebHook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LiveKitWebHookEvent'
        required: true
      responses:
        '200':
          description: OK
  /api/titles/{userId}/equip:
    post:
      tags:
        - 칭호 & 뱃지
      summary: 대표 칭호 설정
      description: 획득한 칭호 중 하나를 대표 칭호로 설정합니다.
      operationId: equipTitle
      parameters:
        - name: titleId
          in: query
          description: 보유하고 있는 칭호 ID
          required: true
          schema:
            type: integer
            format: int64
          example: 1
        - name: userId
          in: path
          description: 장착할 칭호 ID
          required: true
          schema:
            type: integer
            format: int64
          example: 5
      responses:
        '200':
          description: 대표 칭호가 설정되었습니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserTitleResponse'
        '400':
          description: 획득하지 않은 칭호를 대표 칭호로 설정할 수 없습니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserTitleResponse'
        '404':
          description: 칭호를 찾을 수 없습니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserTitleResponse'
  /api/titles/evaluate:
    post:
      tags:
        - 칭호 & 뱃지
      summary: 획득 가능한 칭호 평가 및 지급
      operationId: grantTitles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrantTitleRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GrantTitleResponse'
  /api/timer/stop:
    post:
      tags:
        - 집중 타이머 API
      summary: 집중 종료
      description: 집중 타이머를 종료하고 방에서 퇴장합니다.
      operationId: stopFocus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimerControlRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TimerResponse'
  /api/timer/start:
    post:
      tags:
        - 집중 타이머 API
      summary: 집중 시작
      description: 집중 타이머를 시작합니다.
      operationId: startFocus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimerStartRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TimerResponse'
  /api/timer/resume:
    post:
      tags:
        - 집중 타이머 API
      summary: 집중 재개
      description: 일시정지된 집중 타이머를 재개합니다.
      operationId: resumeFocus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimerControlRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TimerResponse'
  /api/timer/pause:
    post:
      tags:
        - 집중 타이머 API
      summary: 집중 일시정지
      description: 집중 타이머를 일시정지합니다. (자리비움)
      operationId: pauseFocus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimerControlRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TimerResponse'
  /api/study-rooms/leave:
    post:
      tags:
        - 스터디룸 API
      summary: 스터디룸 퇴장
      description: 사용자 ID를 기반으로 StudyRoom에서 퇴장합니다.
      operationId: leaveRoom
      parameters:
        - name: userId
          in: query
          description: 사용자 ID
          required: true
          schema:
            type: string
          example: user123
      responses:
        '200':
          description: 퇴장 성공
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: 서버 내부 오류
          content:
            '*/*':
              schema:
                type: string
  /api/study-rooms/enter:
    post:
      tags:
        - 스터디룸 API
      summary: 스터디룸 입장
      description: 사용자 ID를 기반으로 StudyRoom에 입장하고, 배정된 방 ID를 반환합니다.
      operationId: enterRoom
      parameters:
        - name: userId
          in: query
          description: 사용자 ID
          required: true
          schema:
            type: string
          example: user123
      responses:
        '200':
          description: 입장 성공, 방 ID 반환
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: 서버 내부 오류
          content:
            '*/*':
              schema:
                type: string
  /api/reports:
    post:
      tags:
        - 신고 API
      summary: 신고 접수
      description: 특정 유저에 대한 신고를 접수합니다.
      operationId: report
      requestBody:
        description: 신고 요청 정보
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportRequest'
        required: true
      responses:
        '200':
          description: 신고가 성공적으로 접수되었습니다.
        '400':
          description: 잘못된 요청입니다(자기 자신 신고, 중복 신고 등).
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증되지 않은 사용자입니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 신고 대상을 찾을 수 없습니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 서버 오류 발생.
  /api/livekit/token:
    post:
      tags:
        - LiveKit API
      summary: LiveKit 입장 토큰 발급
      description: 현재 로그인된 사용자에게 LiveKit 입장용 accessToken을 발급합니다.
      operationId: generateToken
      requestBody:
        description: 입장할 방 정보
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
        required: true
      responses:
        '200':
          description: 토큰 발급 성공
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: 인증 실패 또는 토큰 발급 불가
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: 서버 내부 오류
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TokenResponse'
  /api/livekit/refresh:
    post:
      tags:
        - LiveKit API
      summary: Livekit 입장 토큰 재발급 API
      description: 토큰이 만료되거나 Livekit 사용 중인 사용자의 토큰에 이상이 생겼을 때 다시 발급 받습니다.
      operationId: refreshLiveKitToken
      responses:
        '200':
          description: LiveKit 입장용 토큰 재발급 성공
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '500':
          description: 서버 내부 오류
          content:
            '*/*':
              schema:
                type: string
  /api/images/upload:
    post:
      tags:
        - image-upload-controller
      summary: 프로필이미지 등록
      description: 유저(자신)의 프로필 이미지를 등록합니다.
      operationId: updateImage
      requestBody:
        content:
          application/json:
            schema:
              required:
                - imageFile
              type: object
              properties:
                imageFile:
                  type: string
                  format: binary
      responses:
        '200':
          description: 이미지가 성공적으로 등록되었습니다.
          content:
            '*/*':
              schema:
                type: string
        '400':
          description: 잘못된 요청입니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증되지 않은 사용자입니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 등록할 대상을 찾을 수 없습니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 서버 오류 발생.
          content:
            '*/*':
              schema:
                type: string
  /api/auth/signup:
    post:
      tags:
        - 인증 API
      summary: 이메일 회원가입
      description: 이메일, 회원번호를 입력받아 신규 회원을 생성합니다.
      operationId: signup
      requestBody:
        description: 회원가입 요청 정보
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignupRequest'
        required: true
      responses:
        '201':
          description: 이메일 회원가입 성공
        '400':
          description: 요청값이 유효하지 않습니다.
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: 서버 내부 오류
  /api/auth/login:
    post:
      tags:
        - 인증 API
      summary: 로그인
      description: 이메일, 비밀번호로 로그인을 하고 토큰을 응답받습니다.
      operationId: login
      requestBody:
        description: 로그인 요청 정보
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
        required: true
      responses:
        '201':
          description: 로그인 성공
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserLoginResponse'
        '401':
          description: 인증 실패
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: 서버 내부 오류
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserLoginResponse'
  /api/user/profile/profileImage:
    patch:
      tags:
        - 마이페이지 API
      summary: 프로필이미지 수정
      description: 유저(자신)의 프로필 이미지를 수정합니다.
      operationId: updateProfileImage
      requestBody:
        description: 프로필이미지 수정 정보
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileImageRequest'
        required: true
      responses:
        '200':
          description: 이미지가 성공적으로 수정되었습니다.
        '400':
          description: 잘못된 요청입니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증되지 않은 사용자입니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 수정할 대상을 찾을 수 없습니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 서버 오류 발생.
  /api/user/profile/password:
    patch:
      tags:
        - 마이페이지 API
      summary: 비밀번호 수정
      description: 유저(자신)의 비밀번호를 수정합니다.
      operationId: updatePassword
      requestBody:
        description: 비밀번호 수정 정보
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordRequest'
        required: true
      responses:
        '200':
          description: 비밀번호가 성공적으로 수정되었습니다.
        '400':
          description: 잘못된 요청입니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증되지 않은 사용자입니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 수정할 대상을 찾을 수 없습니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 서버 오류 발생.
  /api/user/profile/nickname:
    patch:
      tags:
        - 마이페이지 API
      summary: 닉네임 수정
      description: 유저(자신)의 닉네임을 수정합니다.
      operationId: updateNickname
      requestBody:
        description: 닉네임 수정 정보
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNicknameRequest'
        required: true
      responses:
        '200':
          description: 닉네임이 성공적으로 수정되었습니다.
        '400':
          description: 잘못된 요청입니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증되지 않은 사용자입니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 수정할 대상을 찾을 수 없습니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 서버 오류 발생.
  /api/user/profile/email:
    patch:
      tags:
        - 마이페이지 API
      summary: 이메일 수정
      description: 유저(자신)의 이메일을 수정합니다.
      operationId: updateEmail
      requestBody:
        description: 이메일 수정 정보
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEmailRequest'
        required: true
      responses:
        '200':
          description: 이메일이 성공적으로 수정되었습니다.
        '400':
          description: 잘못된 요청입니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증되지 않은 사용자입니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 수정할 대상을 찾을 수 없습니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 서버 오류 발생.
  /api/user/stat/today-study-time:
    get:
      tags:
        - 통계 페이지 API
      summary: 오늘 공부 시간 조회
      description: 유저의  오늘 공부 시간을 조회합니다.
      operationId: getTodayStudyTime
      responses:
        '200':
          description: 오늘 공부 시간이 성공적으로 조회되었습니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TodayStudyTimeResponse'
        '401':
          description: 인증되지 않은 사용자입니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 서버 오류 발생
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TodayStudyTimeResponse'
  /api/user/stat/normal:
    get:
      tags:
        - 통계 페이지 API
      summary: 공부 데이터 조회
      description: 유저(자신)에 대한 공부 데이터를 조회합니다.
      operationId: getUserNormalStats
      responses:
        '200':
          description: 공부 데이터가 성공적으로 조회되었습니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserStudyStatsResponse'
        '400':
          description: 잘못된 요청입니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증되지 않은 사용자입니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 조회 대상을 찾을 수 없습니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 서버 오류 발생.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserStudyStatsResponse'
  /api/user/stat/daily-focus:
    get:
      tags:
        - 통계 페이지 API
      summary: 일별 집중도 추이 조회
      description: 유저(자신)에 대한 일별 집중도 추이를 조회합니다.
      operationId: getDailyFocus
      parameters:
        - name: startDate
          in: query
          description: 시작일
          required: false
          schema:
            type: string
            format: date
          example: '2025-07-22'
        - name: endDate
          in: query
          description: 종료일
          required: false
          schema:
            type: string
            format: date
          example: '2025-08-01'
      responses:
        '200':
          description: 집중도 추이가 성공적으로 조회되었습니다.
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DailyRecordResponse'
        '400':
          description: 잘못된 요청입니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증되지 않은 사용자입니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 조회 대상을 찾을 수 없습니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 서버 오류 발생.
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DailyRecordResponse'
  /api/user/stat/average-focus-ratio:
    get:
      tags:
        - 통계 페이지 API
      summary: 기간별 집중률 조회
      description: 유저(자신)에 대한 기간별 집중률을 조회합니다.
      operationId: getAverageFocusRatio
      parameters:
        - name: startDate
          in: query
          description: 시작일
          required: false
          schema:
            type: string
            format: date
          example: '2025-07-22'
        - name: endDate
          in: query
          description: 종료일
          required: false
          schema:
            type: string
            format: date
          example: '2025-08-01'
      responses:
        '200':
          description: 기간별 집중률이 성공적으로 조회되었습니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AverageFocusRatioResponse'
        '400':
          description: 잘못된 요청입니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증되지 않은 사용자입니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 조회 대상을 찾을 수 없습니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 서버 오류 발생.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AverageFocusRatioResponse'
  /api/user/profile:
    get:
      tags:
        - 마이페이지 API
      summary: 프로필 조회
      description: 유저(자신)에 대한 프로필 데이터를 조회합니다.
      operationId: getUserProfile
      responses:
        '200':
          description: 프로필이 성공적으로 조회되었습니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '400':
          description: 잘못된 요청입니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증되지 않은 사용자입니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 조회 대상을 찾을 수 없습니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 서버 오류 발생.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
  /api/titles/{userId}/list:
    get:
      tags:
        - 칭호 & 뱃지
      summary: 유저 칭호 목록 조회
      description: 특정 유저가 획득한 모든 칭호 목록을 조회합니다.
      operationId: getUserTitles
      parameters:
        - name: userId
          in: path
          description: 조회할 유저의 ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 칭호 목록 조회 성공
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserTitleResponse'
        '404':
          description: 유저를 찾을 수 없음
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserTitleResponse'
  /api/timer/status/{userId}/{roomId}:
    get:
      tags:
        - 집중 타이머 API
      summary: 타이머 상태 조회
      description: 현재 사용자의 타이머 상태를 조회합니다.
      operationId: getTimerStatus
      parameters:
        - name: userId
          in: path
          description: 사용자 ID
          required: true
          schema:
            type: integer
            format: int64
        - name: roomId
          in: path
          description: 방 ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TimerStatusResponse'
  /api/debug/generate-token:
    get:
      tags:
        - o-auth-2-debug-controller
      operationId: generateTokenTest
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
  /api/debug/auth-info:
    get:
      tags:
        - o-auth-2-debug-controller
      operationId: getAuthInfo
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
components:
  schemas:
    LiveKitWebHookEvent:
      type: object
      properties:
        event:
          type: string
          description: '이벤트 타입 (예: track_published, track_unpublished)'
          example: track_published
        participant:
          $ref: '#/components/schemas/Participant'
        track:
          $ref: '#/components/schemas/Track'
      description: LiveKit Webhook 이벤트 객체
    Participant:
      type: object
      properties:
        id:
          type: string
          description: 참여자 ID (userId)
          example: user-1234
      description: 이벤트를 발생시킨 참여자 정보
    Track:
      type: object
      properties:
        sid:
          type: string
          description: 트랙의 고유 ID
          example: TR_abcdef123456
        type:
          type: string
          description: 트랙 타입
          example: video
          enum:
            - AUDIO
            - VIDEO
            - SCREEN
      description: 발행된 트랙 정보
    UserTitleResponse:
      type: object
      properties:
        titleId:
          type: integer
          description: 타이틀 고유 식별자
          format: int64
        name:
          type: string
          description: 칭호 이름
        description:
          type: string
          description: 칭호 내용
        representative:
          type: boolean
        isRepresentative:
          type: boolean
          description: 대표 칭호 여부
      description: 대표 칭호 장착 응답 DTO
    GrantTitleRequest:
      type: object
      properties:
        userId:
          type: string
        activity:
          $ref: '#/components/schemas/UserActivity'
        stat:
          $ref: '#/components/schemas/UserStudyStat'
    LocalTime:
      type: object
      properties:
        hour:
          type: integer
          format: int32
        minute:
          type: integer
          format: int32
        second:
          type: integer
          format: int32
        nano:
          type: integer
          format: int32
    Title:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        code:
          type: string
          enum:
            - FIRST_ROOM_ENTER
            - ANYTIME_LOGIN
            - NIGHT_OWL
            - FROM_9_START
            - SEVEN_DAYS
            - THIRTY_DAYS
            - FOCUS_BEGINNER
            - FOCUS_RUNNER
            - FOCUS_MASTER
            - FIRST_ONE_HOUR
            - HUNDRED_FOCUS
            - TEN_HOURS_ONE_DAY
            - CHATTER
            - CLEAN_HUNTER
            - TITLE_COLLECTOR
        titleIcon:
          type: string
        conditionType:
          type: string
          enum:
            - ATTENDANCE_DAYS
            - STUDY_TIME
            - FIRST_ROOM_ENTER
        conditionValue:
          type: integer
          format: int32
        userTitles:
          type: array
          items:
            $ref: '#/components/schemas/UserTitle'
        badge:
          type: string
          enum:
            - NONE
            - FIRST_ROOM_ENTER
            - ANYTIME_LOGIN
            - NIGHT_OWL
            - CLEAN_HUNTER
            - FROM_9_START
            - SEVEN_DAYS
            - THIRTY_DAYS
            - FOCUS_BEGINNER
            - FOCUS_RUNNER
            - FOCUS_MASTER
            - FIRST_ONE_HOUR
            - HUNDRED_FOCUS
            - TEN_HOURS_ONE_DAY
            - CHATTER
            - TITLE_COLLECTOR
        imageUrl:
          type: string
    User:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        id:
          type: integer
          format: int64
        userTitle:
          $ref: '#/components/schemas/UserTitle'
        email:
          type: string
        password:
          type: string
        socialProvider:
          type: string
          description: 로그인 타입 ENUM
          enum:
            - LOCAL
            - GOOGLE
            - KAKAO
            - NAVER
        nickname:
          type: string
        introduction:
          type: string
        profileImage:
          type: string
        totalReport:
          type: integer
          format: int32
        userStatus:
          type: string
          description: 유저 상태 ENUM
          enum:
            - NORMAL
            - TEMPORARY_BAN
            - PERMANENT_BAN
        equippedBadge:
          type: string
          enum:
            - NONE
            - FIRST_ROOM_ENTER
            - ANYTIME_LOGIN
            - NIGHT_OWL
            - CLEAN_HUNTER
            - FROM_9_START
            - SEVEN_DAYS
            - THIRTY_DAYS
            - FOCUS_BEGINNER
            - FOCUS_RUNNER
            - FOCUS_MASTER
            - FIRST_ONE_HOUR
            - HUNDRED_FOCUS
            - TEN_HOURS_ONE_DAY
            - CHATTER
            - TITLE_COLLECTOR
        newUser:
          type: boolean
    UserActivity:
      type: object
      properties:
        consecutiveFocusDays:
          type: integer
          format: int32
        oneHourFocusStreak:
          type: integer
          format: int32
        totalChatCount:
          type: integer
          format: int32
        enteredFirstRoom:
          type: boolean
        reportCount:
          type: integer
          format: int32
        lastLoginTime:
          $ref: '#/components/schemas/LocalTime'
        earnedTitleCount:
          type: integer
          format: int32
        loggedInAt9AmToday:
          type: boolean
        consecutiveFocusDaysOverHour:
          type: integer
          format: int32
    UserStudyStat:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          $ref: '#/components/schemas/User'
        totalAttendanceDays:
          type: integer
          format: int32
        continueAttendanceDays:
          type: integer
          format: int32
        lastAttendanceDate:
          type: string
          format: date
        totalStudyTime:
          type: integer
          format: int32
        totalAwayTime:
          type: integer
          format: int32
        consecutiveFocusDaysOverHour:
          type: integer
          format: int32
        titleCount:
          type: integer
          format: int32
    UserTitle:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        id:
          type: integer
          format: int64
        title:
          $ref: '#/components/schemas/Title'
        user:
          $ref: '#/components/schemas/User'
        acquiredAt:
          type: string
          format: date-time
        equipped:
          type: boolean
    GrantTitleResponse:
      type: object
      properties:
        grantedTitleNames:
          type: array
          items:
            type: string
    TimerControlRequest:
      type: object
      properties:
        userId:
          type: integer
          description: 사용자 ID
          format: int64
          example: 1
        roomId:
          type: integer
          description: 방 ID
          format: int64
          example: 1
      description: 타이머 제어 요청 DTO
    TimerResponse:
      type: object
      properties:
        userId:
          type: integer
          description: 사용자 ID
          format: int64
          example: 1
        roomId:
          type: integer
          description: 방 ID
          format: int64
          example: 1
        status:
          type: string
          description: 집중 타입 ENUM
          example: FOCUS
          enum:
            - FOCUS
            - AWAY
        totalStudyTime:
          type: integer
          description: 총 집중 시간(초)
          format: int32
          example: 3600
        totalAwayTime:
          type: integer
          description: 총 자리비움 시간(초)
          format: int32
          example: 300
        statusChangedAt:
          type: string
          description: 상태 변경 시각
          format: date-time
        joinTime:
          type: string
          description: 방 입장 시각
          format: date-time
      description: 타이머 응답 DTO
    TimerStartRequest:
      type: object
      properties:
        userId:
          type: integer
          description: 사용자 ID
          format: int64
          example: 1
        roomId:
          type: integer
          description: 방 ID
          format: int64
          example: 1
      description: 타이머 시작 요청 DTO
    ReportRequest:
      type: object
      properties:
        roomId:
          type: integer
          description: 신고가 발생한 스터디룸 ID
          format: int64
          nullable: true
          example: 123
        chatId:
          type: integer
          description: 신고 당한 채팅 ID
          format: int64
          example: 345
        reportedId:
          type: integer
          description: 신고 당한 유저 ID
          format: int64
          example: 56723
        reason:
          type: string
          description: 신고 사유 ENUM
          example: ABUSE
          enum:
            - OBSCENE_CONTENT
            - ABUSE
            - DISTURBANCE
        description:
          type: string
          description: 신고 사유 상세 설명
          nullable: true
          example: 해당 유저가 욕설을 하였습니다.
      description: 신고 요청 정보 DTO
    ErrorResponse:
      type: object
      properties:
        errorCode:
          type: string
        message:
          type: string
    TokenRequest:
      type: object
      properties:
        roomName:
          type: string
          description: 입장할 방의 ID
          example: study-room-1
    TokenResponse:
      type: object
      properties:
        token:
          type: string
          description: 발급된 LiveKit accessToken
          example: eyJhbGciOiJIUzI1...
    UserSignupRequest:
      type: object
      properties:
        email:
          type: string
          description: 이메일 주소
          example: test@example.com
        password:
          type: string
          description: 비밀번호
          example: 123$$$!
        nickname:
          type: string
          description: 사용자 닉네임
          example: 델키란
        introduction:
          type: string
          description: 자기 소개 문구
          example: 잘 부탁 드립니다.
        profileImage:
          type: string
          description: 프로필 이미지
          example: profile.image
        socialProvider:
          type: string
          description: 로그인 타입 ENUM
          example: SocialProvider.LOCAL
          enum:
            - LOCAL
            - GOOGLE
            - KAKAO
            - NAVER
    UserLoginRequest:
      type: object
      properties:
        email:
          type: string
          description: 이메일
          example: user@example.com
        password:
          type: string
          description: 비밀번호
          example: '0000'
      description: 사용자 이메일 로그인 요청 DTO
    UserLoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT Access Token
          example: eyJhbGciOiJIUzI1...
    UpdateProfileImageRequest:
      required:
        - newProfileImage
      type: object
      properties:
        newProfileImage:
          maxLength: 1024
          type: string
          description: 새로운 프로필 이미지 주소
          example: 'https://newImage.com/profile.png'
      description: 유저 프로필 이미지 수정 요청 DTO
    UpdatePasswordRequest:
      required:
        - confirmNewPassword
        - currentPassword
        - newPassword
      type: object
      properties:
        currentPassword:
          maxLength: 70
          minLength: 0
          type: string
          description: 현재 사용 중인 비밀번호
          example: pass123
        newPassword:
          maxLength: 70
          minLength: 0
          type: string
          description: 새로운 비밀번호
          example: word456
        confirmNewPassword:
          maxLength: 70
          minLength: 0
          type: string
          description: 새로운 비밀번호 확인
          example: word456
      description: 유저 비밀번호 수정 요청 DTO
    UpdateNicknameRequest:
      required:
        - newNickname
      type: object
      properties:
        newNickname:
          maxLength: 20
          minLength: 0
          type: string
          description: 새로운 닉네임
          example: 열공이
      description: 유저 닉네임 수정 요청 DTO
    UpdateEmailRequest:
      required:
        - newEmail
      type: object
      properties:
        newEmail:
          maxLength: 100
          minLength: 0
          type: string
          description: 새로운 이메일 주소
          example: new@example.com
      description: 유저 이메일 수정 요청 DTO
    TodayStudyTimeResponse:
      type: object
      properties:
        todayStudyTime:
          type: integer
          description: 오늘 공부 시간
          format: int32
          example: 1222
      description: 오늘 공부 시간 조회 DTO
    UserStudyStatsResponse:
      type: object
      properties:
        userId:
          type: integer
          description: 유저 ID
          format: int64
        nickname:
          type: string
          description: 유저 닉네임
          example: 열공이
        totalStudyTime:
          type: integer
          description: 누적 공부 시간
          format: int32
          example: 232334
        totalAwayTime:
          type: integer
          description: 누적 자리 비움 시간
          format: int32
          example: 5654
        totalAttendanceDays:
          type: integer
          description: 누적 출석일 수
          format: int32
          example: 123
        continueAttendanceDays:
          type: integer
          description: 연속 출석일 수
          format: int32
          example: 23
        lastAttendanceDate:
          type: string
          description: 마지막 출석일
          format: date
          example: '2025-08-01'
      description: 유저 공부 데이터 응답 DTO
    DailyRecordResponse:
      type: object
      properties:
        recordDate:
          type: string
          description: 기록한 날짜
          format: date
          example: '2025-08-01'
        dailyStudyTime:
          type: integer
          description: 하루 공부 시간
          format: int32
          example: 2222
        dailyAwayTime:
          type: integer
          description: 하루 자리 비움 시간
          format: int32
          example: 1111
        focusRatio:
          type: number
          description: 하루 집중률
          format: double
          example: 0.53
      description: 하루 기록 응답 DTO
    AverageFocusRatioResponse:
      type: object
      properties:
        startDate:
          type: string
          description: 조회 시작일
          format: date
          example: '2025-07-22'
        endDate:
          type: string
          description: 조회 종료일
          format: date
          example: '2025-07-29'
        averageFocusRatio:
          type: number
          description: 해당 기간의 평균 집중률
          format: double
          example: 0.34
      description: 평군 집중률 응답 DTO
    UserProfileResponse:
      type: object
      properties:
        profileImage:
          type: string
          description: 프로필 이미지 주소
          example: 'https://newImage.com/profile.png'
        nickname:
          type: string
          description: 유저 닉네임
          example: 열공이
        email:
          type: string
          description: 유저 이메일
          example: new@example.com
        selectedTitle:
          type: string
          description: 유저 장착 칭호
          example: NIGHT_OWL
        totalStudyTime:
          type: integer
          description: 누적 공부 시간
          format: int32
          example: 23566
        totalAttendanceDays:
          type: integer
          description: 누적 출석일
          format: int32
          example: 121
        continueAttendanceDays:
          type: integer
          description: 연속 출석일
          format: int32
          example: 23
      description: 유저 프로필 응답 DTO
    TimerStatusResponse:
      type: object
      properties:
        userId:
          type: integer
          description: 사용자 ID
          format: int64
          example: 1
        roomId:
          type: integer
          description: 방 ID
          format: int64
          example: 1
        nickname:
          type: string
          description: 사용자 닉네임
          example: 스터디왕
        currentStatus:
          type: string
          description: 집중 타입 ENUM
          example: FOCUS
          enum:
            - FOCUS
            - AWAY
        currentSessionStudyTime:
          type: integer
          description: 현재 세션에서의 집중 시간(초)
          format: int32
          example: 1800
        currentSessionAwayTime:
          type: integer
          description: 현재 세션에서의 자리비움 시간(초)
          format: int32
          example: 120
        totalStudyTime:
          type: integer
          description: 총 누적 집중 시간(초)
          format: int32
          example: 7200
        totalAwayTime:
          type: integer
          description: 총 누적 자리비움 시간(초)
          format: int32
          example: 600
        statusChangedAt:
          type: string
          description: 상태 변경 시각
          format: date-time
        currentStatusDuration:
          type: integer
          description: 현재 상태 지속 시간(초)
          format: int32
          example: 900
      description: 현재 타이머 상태 조회 응답 DTO